import Vision
import AVFoundation
import CoreGraphics

class ObjectDetector: NSObject {
    private var detectionRequest: VNCoreMLRequest?
    var onResults: (([CGRect]) -> Void)?

    override init() {
        super.init()
        setupModel()
    }

    private func setupModel() {
        do {
            // This class name 'smoking_detection_trained2' is generated by Xcode
            // from the .mlpackage file you add to the project.
            // If your model file has a different name, you must change it here.
            let model = try smoking_detection_trained2(configuration: MLModelConfiguration()).model
            let visionModel = try VNCoreMLModel(for: model)
            detectionRequest = VNCoreMLRequest(model: visionModel, completionHandler: visionRequestDidComplete)
            // This setting makes the model analyze the entire image.
            detectionRequest?.imageCropAndScaleOption = .scaleFill
        } catch {
            print("Failed to load Vision ML model: \(error)")
        }
    }

    func processFrame(_ buffer: CMSampleBuffer) {
        guard let request = detectionRequest,
              let pixelBuffer = CMSampleBufferGetImageBuffer(buffer) else {
            return
        }

        let handler = VNImageRequestHandler(cvPixelBuffer: pixelBuffer, orientation: .upMirrored, options: [:])
        do {
            try handler.perform([request])
        } catch {
            print("Failed to perform detection: \(error.localizedDescription)")
        }
    }

    private func visionRequestDidComplete(request: VNRequest, error: Error?) {
        if let error = error {
            print("Vision request failed: \(error.localizedDescription)")
            return
        }
        guard let results = request.results as? [VNRecognizedObjectObservation] else {
            return
        }
        
        // Extract the bounding boxes from the results
        let boxes = results.map { $0.boundingBox }

        DispatchQueue.main.async {
            // Pass the bounding boxes back to the ContentView
            self.onResults?(boxes)
        }
    }
} 